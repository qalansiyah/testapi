# Код-ревью

## Положительные моменты:
1. Основная структура проекта выглядит в соответствии с требованиями NEST JS. Есть разделение на модули, контроллеры, сервисы и сущности.
2. Используется паттерн Dependency Injection для предоставления зависимостей сервисам через конструкторы. Это позволяет легко изменять поведение приложения, упрощает тестирование и соответствует принципам DRY и KISS.
3. Также используется Data Transfer Objects, что помогает контролировать валидацию данных, входящих в приложение.
4. Используется Repository Pattern для абстрагирования работы с базой данных, что позволяет легко заменить источник данных.
5. Валидация данных, DTO содержат аннотации валидации из пакета class-validator, что обеспечивает проверку входных данных на соответствие определенным критериям.
6. Используется Swagger для документирования API и это замечательно.

## Замечания:
1. Захардкоженного кода не много, но все же имеется, например в `validate.pipe.ts`.
2. Проект лишь частично имеет модульные тесты.
3. Имеется избыточность в обработчиках промиссов. Почему бы просто не использовать `try/catch`, когда используется `async await`?
4. В некоторых местах сервисы выполняют слишком много задач, что приводит к нарушению принципа Single Responsibility Principle. Например, в `account.service.ts` можно заметить, что сервис отвечает как за получение данных так и их обработку.
5. В коде проекта недостаточная обработка ошибок, особенно в местах, где происходит взаимодействие с внешними системами.

## Предложения:
1. Константы лучше сгруппировать и поместить в отдельные классы и установить `readonly`, например в `exception.constant.ts`, это уменьшит их длину имени и сделает код более читабельным.
2. Кое-где в коде переменные в разных регистрах, как в camel так и в snake и это не константные значения, например в `bank_sessions.entity.ts`.
3. Для библиотек `libs` лучше создать отдельный репозиторий и устанавливать их как отдельные зависимости при помощи `npm`, держать все в одном репозитории это плохая идея, в проекте должен находится только рабочий проект `app`, это даст больше гибкости и не будет нарушение принципа DRY.
4. В проекте имеется несколько файлов, в которых код нигде не используется, например `app.controller.ts` и `app.service.ts` те, что в директории `src`, их надо удалить чтобы не загрязнять проект и не нарушать принципа YAGNI.
5. Документация Swagger задокументирована не полностью. Например, задокументирован только статус кода 200, но нет остальных: 400, 422 и т.д.
6. Не ясно, почему конфиденциальная информация находится в коде `user.info.ts`, хотя она закомментирована. Надеюсь, что она фейковая.
